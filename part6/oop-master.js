// object literal
let car = {
    make: "Toyota",
    model: "Camry",
    year: 2020,
    start: function() {
        return `${this.make} car got started in ${this.year}`;
    },
};
// console.log(car.make);
// console.log(car.model);
// console.log(car.year);
// console.log(car.start());



// constructor function
function Person(name, age) {
    this.name = name;
    this.age = age;
}
// object creating
let john = new Person("John Doe", 20);
// console.log(john.name);


// constructor function
function Animal(type) {
    this.type = type;
}

// learning prototype and prototype chain 
Animal.prototype.speak = function() {
    return `${this.type} makes a sound`
}
// BELOW COMMENTED CODE WILL EXPLAINS US IN DETAIL ABOUT PROTOTYPE CHAIN. THIS BELOW IS GENERATED BY CHAT-GPT

function Animal(type) {
    this.type = type;
}

// Step1. Prototype in This Code
Animal.prototype.speak = function() {
    return `${this.type} makes a sound`
}
// Here, Animal.prototype is the prototype object of all instances created using the Animal constructor. It contains the speak method, which is shared by all Animal instances.

// Step 2. Prototype Chain in This Code
// When we create an instance of Animal, it inherits from Animal.prototype, forming a prototype chain.
let dog = new Animal("Dog");

// console.log(dog.type); // Dog (found directly on dog)
// console.log(dog.speak()); // Dog makes a sound (found in Animal.prototype)
// console.log(dog.toString()); // [object Object] (found in Object.prototype)

// Prototype Chain Breakdown:
// dog.type → Found directly inside dog (own property).
// dog.speak() → Not found inside dog, so JavaScript looks in Animal.prototype, where it finds speak().
// dog.toString() → Not found in dog or Animal.prototype, so JavaScript looks in Object.prototype, which is the top-level prototype.

// Visual Representation of Prototype Chain :
// dog → Animal.prototype → Object.prototype → null



// Let's play more with prototypes and prototype chaining
Array.prototype.dishant = function() {
    return `Custom method ${this}`;
}

let myArray = [1, 2, 3];
// console.log(myArray.dishant());

let myNewArray = [1, 2, 3, 4, 5, 6, 7];
// console.log(myNewArray.dishant());

// So in upper code hamne `Array` ke andar hee prototype inject krdiya means abb jitne bhi arrays hamm banaenge that every array will contain this : `dishant` prototype 



// Class and Inheritance
class Vehicle {

    // constructor method
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    // method (or we can say our normal function)
    start() {
        return `${this.model} is a car from ${this.make}`;
    }
}

class Car extends Vehicle {

    drive() {
        return `${this.make}: This is an inheritance example`;
    }
}

let myCar = new Car("Toyota", "Corolla");
// console.log(myCar.start());
// console.log(myCar.drive());

let vehOne = new Vehicle("Toyota", "Corolla");
// console.log(vehOne);
// console.log(vehOne.start());
// console.log(vehOne.drive());





// BELOW EXAMPLE IS MY CURIOSITY CHANGES NOT RELATED TO LECTURE
// class Vehicle {

//     // constructor method
//     constructor(make, model) {
//         this.make = make;
//         this.model = model;
//     }

//     // method (or we can say our normal function)
//     start() {
//         return `${this.model} is a car from ${this.make}`;
//     }
// }

// class Car extends Vehicle {
//     speak() {
//         return `lets speak`
//     }
//     drive() {
//         return `${this.make}: This is an inheritance example`;
//     }
// }

// let myCar = new Car();
// // console.log(myCar);
// console.log(myCar.speak());

