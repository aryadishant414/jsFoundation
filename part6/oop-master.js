// object literal
let car = {
    make: "Toyota",
    model: "Camry",
    year: 2020,
    start: function() {
        return `${this.make} car got started in ${this.year}`;
    },
};
// console.log(car.make);
// console.log(car.model);
// console.log(car.year);
// console.log(car.start());



// constructor function
function Person(name, age) {
    this.name = name;
    this.age = age;
}
// object creating
let john = new Person("John Doe", 20);
// console.log(john.name);


// constructor function
function Animal(type) {
    this.type = type;
}

// learning prototype and prototype chain 
Animal.prototype.speak = function() {
    return `${this.type} makes a sound`
}
// BELOW COMMENTED CODE WILL EXPLAINS US IN DETAIL ABOUT PROTOTYPE CHAIN. THIS BELOW IS GENERATED BY CHAT-GPT

function Animal(type) {
    this.type = type;
}

// Step1. Prototype in This Code
Animal.prototype.speak = function() {
    return `${this.type} makes a sound`
}
// Here, Animal.prototype is the prototype object of all instances created using the Animal constructor. It contains the speak method, which is shared by all Animal instances.

// Step 2. Prototype Chain in This Code
// When we create an instance of Animal, it inherits from Animal.prototype, forming a prototype chain.
let dog = new Animal("Dog");

// console.log(dog.type); // Dog (found directly on dog)
// console.log(dog.speak()); // Dog makes a sound (found in Animal.prototype)
// console.log(dog.toString()); // [object Object] (found in Object.prototype)

// Prototype Chain Breakdown:
// dog.type → Found directly inside dog (own property).
// dog.speak() → Not found inside dog, so JavaScript looks in Animal.prototype, where it finds speak().
// dog.toString() → Not found in dog or Animal.prototype, so JavaScript looks in Object.prototype, which is the top-level prototype.

// Visual Representation of Prototype Chain :
// dog → Animal.prototype → Object.prototype → null



// Let's play more with prototypes and prototype chaining
Array.prototype.dishant = function() {
    return `Custom method ${this}`;
}

let myArray = [1, 2, 3];
// console.log(myArray.dishant());

let myNewArray = [1, 2, 3, 4, 5, 6, 7];
// console.log(myNewArray.dishant());

// So in upper code hamne `Array` ke andar hee prototype inject krdiya means abb jitne bhi arrays hamm banaenge that every array will contain this : `dishant` prototype 



// Class and Inheritance
class Vehicle {

    // constructor method
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    // method (or we can say our normal function)
    start() {
        return `${this.model} is a car from ${this.make}`;
    }
}

class Car extends Vehicle {

    drive() {
        return `${this.make}: This is an inheritance example`;
    }
}

let myCar = new Car("Toyota", "Corolla");
// console.log(myCar.start());
// console.log(myCar.drive());

let vehOne = new Vehicle("Toyota", "Corolla");
// console.log(vehOne);
// console.log(vehOne.start());
// console.log(vehOne.drive());





// BELOW EXAMPLE IS MY CURIOSITY CHANGES NOT RELATED TO LECTURE
// class Vehicle {

//     // constructor method
//     constructor(make, model) {
//         this.make = make;
//         this.model = model;
//     }

//     // method (or we can say our normal function)
//     start() {
//         return `${this.model} is a car from ${this.make}`;
//     }
// }

// class Car extends Vehicle {
//     speak() {
//         return `lets speak`
//     }
//     drive() {
//         return `${this.make}: This is an inheritance example`;
//     }
// }

// let myCar = new Car();
// // console.log(myCar);
// console.log(myCar.speak());



// Encapsulation
class BankAccount {

    #balance = 0; // here encapsulation happened using `hash(#)`

    deposit(amount) {
        this.#balance += amount;
        return this.#balance;
    }

    getBalance() {
        return `$ ${this.#balance}`;
    }
}

let account = new BankAccount();
// console.log(account.balance);
// console.log(account.#balance);
// console.log(account.getBalance());



// Abstraction
class CoffeeMachine {

    // the below `start` method is first calling the DB then filtering the value but inn sabhi unnecesary details sai hame kuch nhi krna hai we just want necessary details jo ki hai : return wali line. so behind the scenes sai hame koi mtlb nhi
    start() {
        // Call DB
        // filter value
        return `Starting the machine...`
    }

    // just like upper start method isme bhi hame unnecessary details sai kuch nhi krna hai. hamare kaam ki chij sirf ye return wali line hai.
    brewCoffee() {
        // complex calculation
        return `Brewing coffee`;
    }

    pressStartButton() {
        let msgOne = this.start();
        let msgTwo = this.brewCoffee();
        return `${msgOne} + ${msgTwo}`;
    }
}

let myMachine = new CoffeeMachine();
// console.log(myMachine.start());
// console.log(myMachine.brewCoffee());

// console.log(myMachine.pressStartButton());



// Polymorphism
class Bird {

    fly() {
        return `Flying...`
    }
}

class Penguin extends Bird {

    fly() {
        return `Penguins can't fly`;
    }
}

let myBird = new Bird();
// console.log(myBird.fly());

let myPenguin = new Penguin();
// console.log(myPenguin.fly());



// Static method
// note : static can be anything like : methods, variables, properties can be static.
class Calculator {

    static add(a, b) {
        return a + b;
    }
}

// static method can't be used like below
let miniCalc = new Calculator();
// console.log(miniCalc.add());

// to use static method :
// here the `class directly calling the static method`
// console.log(Calculator.add(5,2));



// Getters and Setters
// class Employee {

//     constructor(name, salary) {
//         if(salary < 0) {
//             throw new Error("Salary can't be negative");
//         }
//         this.name = name;
//         this._salary = salary;
//     }

//     // Getter
//     get salary() {
        
//         return `INSIDE GETTER FUNCTION: ${this._salary}`

//         // return `You are not allowed to see salary`  // just to check kuch bhi return kiya hai
//     }

//     set salary(value) {
//         if(value < 0) {
//             console.error("Invalid Salary");
//         } else {
//             this._salary = value;
//         }
//     }
// }
// let emp = new Employee("Alice", 50000);
// console.log(emp._salary); // Accessing our normal property inside the class

// console.log(emp.salary); // this is the way to Access getter method/function

// // lets change salary using normal way
// emp._salary = 65000;
// console.log(emp._salary);
// console.log(emp.salary);

// // lets change salary using `Setter`
// emp.salary = 85000; // this is the way to use setter function
// console.log(emp._salary);
// console.log(emp.salary);
 


// MORE HIT AND TRIALS ON UPPER EXAMPLE
// Getters and Setters
class Employee {

    #salary // fully private bana diya salary ko
    constructor(name, salary) {
        if(salary < 0) {
            throw new Error("Salary can't be negative");
        }
        this.name = name;
        this.#salary = salary;
    }

    // Getter
    get salary() {
        
        return `INSIDE GETTER FUNCTION: ${this.#salary}`

        // return `You are not allowed to see salary`  // just to check kuch bhi return kiya hai
    }

    set salary(value) {
        if(value < 0) {
            console.error("Invalid Salary");
        } else {
            this.#salary = value;
        }
    }
}
let emp = new Employee("Alice", 50000);
console.log(emp.salary); // accessing `getter`
 emp.salary = 95000;
 console.log("AFTER UPDATING : ", emp.salary);
 




